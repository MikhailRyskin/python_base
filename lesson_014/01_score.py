# -*- coding: utf-8 -*-

# Вас взяли на работу в молодой стартап. Идея стартапа - предоставлять сервис расчета результатов игр.
# Начать решили с боулинга, упрощенной версии.
#
# Правила такие.
#
# Всего 10 кеглей. Игра состоит из 10 фреймов. В одном фрейме до 2х бросков, цель - сбить все кегли.
# Результаты фрейма записываются символами:
#   «Х» – «strike», все 10 кеглей сбиты первым броском
#   «<число>/», например «4/» - «spare», в первый бросок сбиты 4 кегли, во второй – остальные
#   «<число><число>», например, «34» – в первый бросок сбито 3, во второй – 4 кегли.
#   вместо <число> может стоять прочерк «-», например «-4» - ни одной кегли не было сбито за первый бросок
# Результат игры – строка с записью результатов фреймов. Символов-разделителей между фреймами нет.
# Например, для игры из 4 фреймов запись результатов может выглядеть так:
#   «Х4/34-4»
# Предлагается упрощенный способ подсчета количества очков:
#   «Х» – strike всегда 20 очков
#   «4/» - spare всегда 15 очков
#   «34» – сумма 3+4=7
#   «-4» - сумма 0+4=4
# То есть для игры «Х4/34-4» сумма очков равна 20+15+7+4=46
#
# Надо написать python-модуль (назвать bowling), предоставляющий API расчета количества очков:
# функцию get_score, принимающую параметр game_result. Функция должна выбрасывать исключения,
# когда game_result содержит некорректные данные. Использовать стандартные исключения по максимуму,
# если не хватает - создать свои.
#
# Обязательно написать тесты на этот модуль. Расположить в папке tests.

# Из текущего файла сделать консольную утилиту для определения количества очков, с помощью пакета argparse
# Скрипт должен принимать параметр --result и печатать на консоль:
#   Количество очков для результатов ХХХ - УУУ.

#  Добавьте описания
#  К примеру - description='Консольная утилита для подсчета очков в боулинге'
#  Если нет аргументов или забыли передать, сообщите об этом
#  Это описание перенесите в парсер в параметр "description"
#  argparse.ArgumentParser(description='Консольная утилита для подсчета ...


#  По поводу параметра "--result" или "-result" здесь имеется ввиду что с помощью этой метки передают данные.
#  То есть когда открывают консоль вводим: python 01_score.py --result 'строка с очками'
#  А к примеру когда не передали аргумент: python 01_score.py
#  Выводим сообщение Введите результаты игры или воспользуйтесь --help или -h'
#  .
#  Чтобы это сделать нужно доработать парсер.
#  Добавляем параметры "--result": add_argument('--result', '-result', type=str, help='Результаты бросков в боулинге')
#  И теперь если аргументы не были переданы выведется сообщения из блока "else" - результаты игры не переданы
#  Более логично сделать такое описание - Введите результаты игры или воспользуйтесь --help или -h'
#  Потому что когда не передадут аргументы будет корректная подсказка, чтобы узнать что передавать.
#  .
#  Таким образом:
#  parser.add_argument('--result', '-result', type=str, help='Результаты бросков в боулинге')
#  args = parser.parse_args()
#     if ...
#         ...
#     else:
#         print('Введите результаты игры или воспользуйтесь --help или -h')
#  Если передать в консоль параметр "-h" выведется подсказка, примерно такая.
#  1) Описание из "description" ArgumentParser
#  2) Какие есть аргументы
#   -h, --help
#   --result, -result
#                   Результаты бросков в боулинге - берется сообщение из "parser.add_argument"

""" Консольная утилита для подсчета очков в боулинге.
входные данные:
строка с записью результатов - 10 фреймов без символов-разделителей
выходные данные:
сумма набранных очков"""

import argparse
from bowling import get_score

parser = argparse.ArgumentParser(description='Консольная утилита для подсчета очков в боулинге.')
parser.add_argument('--result', '-result', type=str, help='Результаты бросков в боулинге -'
                                                          'строка с записью результатов 10 фреймов без '
                                                          'символов-разделителей')
parser.add_argument('--inter', '-inter', type=str, default=False, help='Система подсчёта очков: по умолчанию -'
                                                                       'российская, True - международная')
args = parser.parse_args()
if args.result:
    get_score(game_result=args.result, inter=args.inter)
else:
    print('Введите результаты игры или воспользуйтесь --help или -h')

# При написании кода помнить, что заказчик может захотеть доработок и новых возможностей...
# И, возможно, вам пригодится паттерн проектирования "Состояние",
#   см https://clck.ru/Fudd8 и https://refactoring.guru/ru/design-patterns/state

# зачет!
